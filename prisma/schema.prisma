generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String?        @unique
  password      String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  biography     String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  follower      UsersFollows[] @relation("following")
  following     UsersFollows[] @relation("follower")
  post          Post[]
  like          Like[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model UsersFollows {
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("users_follows")
}

model Post {
  id          Int      @id @default(autoincrement())
  description String
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image       Image[]
  like        Like[]

  @@map("post")
}

model Like {
  postId Int    @map("post_id")
  userId String @map("user_id")
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("like")
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String @unique
  postId Int    @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("image")
}
